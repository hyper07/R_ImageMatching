library(MicrosoftML)
install.packages("MicrosoftML")
install.packages("MicrosoftML")
install.packages("RevoScaleR")
rm(list=ls())
require(EBImage)
install.packages("EBImage")
DQF3
q()
q()
?ccf
### options
options(scipen=999)
folder_data = paste0(folder_main, "/data/")
##path setting
folder_main = "C:/Users/VIP/Desktop/R_project/R_matching/data"
folder_data = paste0(folder_main, "/data/")
folder_result = paste0(folder_main, "/result/")
install.packages("jpeg")
library(jpeg)
file_name_image = paste0(folder_data, "20.jpg")
image.main <- readJPEG(file_name_image)
file_name_image
image.main <- readJPEG(file_name_image)
image.main <- readJPEG(folder_data)
file_name_image = paste0(folder_data, "20.jpg")
file_name_image
##path setting
folder_main = "C:/Users/VIP/Desktop/R_project/R_matching"
folder_data = paste0(folder_main, "/data/")
folder_result = paste0(folder_main, "/result/")
install.packages("jpeg")
install.packages("jpeg")
library(jpeg)
file_name_image = paste0(folder_data, "20.jpg")
image.main <- readJPEG(file_name_image)
install.packages("jpeg")
library(jpeg)
file_name_image = paste0(folder_data, "20.jpg")
folder_data = paste0(folder_main, "/data/")
file_name_image = paste0(folder_data, "20.jpg")
image.main <- readJPEG(file_name_image)
image.main
dim(image.main)
# image.main.sub <- readJPEG("path to another jpeg image, cropped version of the first")
dim(image_1)
file_name_image_1 = paste0(folder_data, "20.jpg")
image_1 <- readJPEG(file_name_image_1)
file_name_image_2 = paste0(folder_data, "21.jpg")
image_2 <- readJPEG(file_name_image_2)
# image.main.sub <- readJPEG("path to another jpeg image, cropped version of the first")
dim(image_1)
dim(image_2)
image.main <- image1
image.main <- sample(1:20,20)
image.main <- image_1
image.main <- sample(1:20,20)
image.main
image.main.sub <- image.main[5:8]
image.main
image.main.sub
ccf(image.main,image.main.sub,plot=FALSE)
ccf(image.main[5:8],image.main.sub,plot=FALSE)
file_name_image_1 = paste0(folder_data, "20.jpg")
image_1 <- readJPEG(file_name_image_1)
file_name_image_2 = paste0(folder_data, "21.jpg")
image_2 <- readJPEG(file_name_image_2)
# image.main.sub <- readJPEG("path to another jpeg image, cropped version of the first")
dim(image_1)
dim(image_2)
ccf(image.main,image.main.sub,plot=FALSE)
ccf(image.main,image.main.sub,plot=FALSE)[3]
ccf(image.main,image.main.sub,plot=FALSE)[0]
ccf(image_1,image_2,plot=FALSE)[0]
ccf(image_1,image_2,plot=FALSE)
image_1
str(image_1)
image_1[1:10, 1:10]
temp01  <- image_1[1:10, 1:10]
temp01  <- image_1[1:3, 1:3]
temp01
temp02 <- as.numeric(temp01)
temp02
temp01-col <- as.numeric(temp01)
temp01
temp01-col <- as.numeric(temp01)
temp01_col
temp01_col <- as.numeric(temp01)
temp01_col
temp01
temp01_row <- as.numeric(t(temp01))
temp01_row
## image_2
image_2_row <- as.numeric(t(image_2))
head(image_2_row)
image_2_col <- as.numeric(image_2)
head(image_2_col)
ccf(image_1_row,image_2_row,plot=FALSE)
##image_1
image_1_row <- as.numeric(t(image_1))
head(image_1_row)
image_1_col <- as.numeric(image_1)
head(image_1_col)
ccf(image_1_row,image_2_row,plot=FALSE)
ccf(image_1_row,image_2_row,plot=FALSE)[0]
ccf_value_row <- ccf(image_1_row,image_2_row,plot=FALSE)[0]
ccf_value_row
ccf_value_col <- ccf(image_1_col,image_2_col,plot=FALSE)[0]
ccf_value_col
### correaltion #######
#  the cross-correlation or cross-covariance of two univariate series.
#
# #####################
ccf_value_row <- ccf(image_1_row,image_2_row,plot=FALSE)[0]
ccf_value_row
ccf_value_col <- ccf(image_1_col,image_2_col,plot=FALSE)[0]
ccf_value_col
### loading image files
file_name_image_1 = paste0(folder_data, "20.jpg")
image_1 <- readJPEG(file_name_image_1)
file_name_image_2 = paste0(folder_data, "21.jpg")
image_2 <- readJPEG(file_name_image_2)
# image.main.sub <- readJPEG("path to another jpeg image, cropped version of the first")
dim(image_1)
dim(image_2)
##image_1
image_1_row <- as.numeric(t(image_1))
head(image_1_row)
image_1_col <- as.numeric(image_1)
head(image_1_col)
## image_2
image_2_row <- as.numeric(t(image_2))
head(image_2_row)
image_2_col <- as.numeric(image_2)
head(image_2_col)
### correaltion #######
#  the cross-correlation or cross-covariance of two univariate series.
#
# #####################
ccf_value_row <- ccf(image_1_row,image_2_row,plot=FALSE)[0]
ccf_value_row
ccf_value_col <- ccf(image_1_col,image_2_col,plot=FALSE)[0]
ccf_value_col
### loading image files
file_name_image_1 = paste0(folder_data, "1.jpg")
image_1 <- readJPEG(file_name_image_1)
file_name_image_2 = paste0(folder_data, "2.jpg")
image_2 <- readJPEG(file_name_image_2)
# image.main.sub <- readJPEG("path to another jpeg image, cropped version of the first")
dim(image_1)
dim(image_2)
##image_1
image_1_row <- as.numeric(t(image_1))
head(image_1_row)
image_1_col <- as.numeric(image_1)
head(image_1_col)
## image_2
image_2_row <- as.numeric(t(image_2))
### loading image files
file_name_image_1 = paste0(folder_data, "502.jpg")
image_1 <- readJPEG(file_name_image_1)
file_name_image_2 = paste0(folder_data, "503.jpg")
image_2 <- readJPEG(file_name_image_2)
# image.main.sub <- readJPEG("path to another jpeg image, cropped version of the first")
dim(image_1)
dim(image_2)
### arranging data
##image_1
image_1_row <- as.numeric(t(image_1))
head(image_1_row)
image_1_col <- as.numeric(image_1)
head(image_1_col)
## image_2
image_2_row <- as.numeric(t(image_2))
head(image_2_row)
image_2_col <- as.numeric(image_2)
head(image_2_col)
### correaltion #######
#  the cross-correlation or cross-covariance of two univariate series.
#
# #####################
ccf_value_row <- ccf(image_1_row,image_2_row,plot=FALSE)[0]
ccf_value_row
ccf_value_col <- ccf(image_1_col,image_2_col,plot=FALSE)[0]
ccf_value_col
### options
options(scipen=999)
### options
options(scipen=999)
### folder sets
folder_main = "C:/Users/VIP/Desktop/R_project/R_matching2"
folder_data = paste0(folder_maain, "/data/")
folder_result = paste0(folder_maain, "/result/")
folder_prediction = paste0(folder_maain, "/prediction/")
folder_model = paste0(folder_maain, "/model/")
folder_plot = paste0(folder_maain, "/plot/")
### folder sets
folder_main = "C:/Users/VIP/Desktop/R_project/R_matching2"
folder_data = paste0(folder_main, "/data/")
folder_result = paste0(folder_main, "/result/")
folder_prediction = paste0(folder_main, "/prediction/")
folder_model = paste0(folder_main, "/model/")
folder_plot = paste0(folder_main, "/plot/")
folder_data = paste0(folder_main, "/data/cut_all/")
folder_grey = paste0(folder_main, "data_grey"
### scaling : gray, pixel(200 x 200)
image <- list.files(folder_data)
### scaling : gray, pixel(200 x 200)
image <- list.files(folder_data)
image
### scaling : gray, pixel(200 x 200)
library(jpeg)
image
images
### setting width, height
w <- 200
h <- 200
### Load images names
images <- list.files(folder_data_origin)
images
### setting width, height
w <- 200
h <- 200
### Set wd where images are located
# setwd("C://dogs_images")
setwd(folder_main)
### setting width, height
w <- 200
h <- 200
for(i in 1:length(images))
{
# Try-catch is necessary since some images
# may not work.
result <- tryCatch({
# Image name
imgname <- images[i]
# Read image
img <- readImage(imgname)
# Resize image 28x28
img_resized <- resize(img, w = w, h = h)
# Set to grayscale
grayimg <- channel(img_resized,"gray")
# Path to file
path <- paste(folder_grey, imgname, sep = "")
# Save image
writeImage(grayimg, path, quality = 100)
# Print status
print(paste("Done",i,sep = " "))},
# Error function
error = function(e){print(e)})
}
images <- list.files(folder_data)
images
setwd(folder_main)
### scaling : gray, pixel(200 x 200)
library(jpeg)
images <- list.files(folder_data)
images
### setting width, height
w <- 200
h <- 200
for(i in 1:length(images))
{
# Try-catch is necessary since some images
# may not work.
result <- tryCatch({
# Image name
imgname <- images[i]
# Read image
img <- readImage(imgname)
# Resize image 28x28
img_resized <- resize(img, w = w, h = h)
# Set to grayscale
grayimg <- channel(img_resized,"gray")
# Path to file
path <- paste(folder_grey, imgname, sep = "")
# Save image
writeImage(grayimg, path, quality = 100)
# Print status
print(paste("Done",i,sep = " "))},
# Error function
error = function(e){print(e)})
}
### scaling : gray, pixel(200 x 200)
library(jpeg)
### setting width, height
w <- 200
h <- 200
for(i in 1:length(images))
{
# Try-catch is necessary since some images
# may not work.
result <- tryCatch({
# Image name
imgname <- images[i]
# Read image
img <- readImage(imgname)
# Resize image 28x28
img_resized <- resize(img, w = w, h = h)
# Set to grayscale
grayimg <- channel(img_resized,"gray")
# Path to file
path <- paste(folder_grey, imgname, sep = "")
# Save image
writeImage(grayimg, path, quality = 100)
# Print status
print(paste("Done",i,sep = " "))},
# Error function
error = function(e){print(e)})
}
library(EBImage)
images <- list.files(folder_data)
images
### setting width, height
w <- 200
h <- 200
for(i in 1:length(images))
{
# Try-catch is necessary since some images
# may not work.
result <- tryCatch({
# Image name
imgname <- images[i]
# Read image
img <- readImage(imgname)
# Resize image 28x28
img_resized <- resize(img, w = w, h = h)
# Set to grayscale
grayimg <- channel(img_resized,"gray")
# Path to file
path <- paste(folder_grey, imgname, sep = "")
# Save image
writeImage(grayimg, path, quality = 100)
# Print status
print(paste("Done",i,sep = " "))},
# Error function
error = function(e){print(e)})
}
### setting width, height
w <- 80
h <- 80
for(i in 1:length(images))
{
# Try-catch is necessary since some images
# may not work.
result <- tryCatch({
# Image name
imgname <- images[i]
# Read image
img <- readImage(imgname)
# Resize image 28x28
img_resized <- resize(img, w = w, h = h)
# Set to grayscale
grayimg <- channel(img_resized,"gray")
# Path to file
path <- paste(folder_grey, imgname, sep = "")
# Save image
writeImage(grayimg, path, quality = 100)
# Print status
print(paste("Done",i,sep = " "))},
# Error function
error = function(e){print(e)})
}
# may not work.
i=1
result <- tryCatch({
# Image name
imgname <- images[i]
# Read image
img <- readImage(imgname)
# Resize image 28x28
img_resized <- resize(img, w = w, h = h)
# Set to grayscale
grayimg <- channel(img_resized,"gray")
# Path to file
path <- paste(folder_grey, imgname, sep = "")
# Save image
writeImage(grayimg, path, quality = 100)
# Print status
print(paste("Done",i,sep = " "))},
# Error function
error = function(e){print(e)})
images <- list.files(folder_data)
images
setwd(folder_data)
for(i in 1:length(images))
{
# Try-catch is necessary since some images
# may not work.
i=1
result <- tryCatch({
# Image name
imgname <- images[i]
# Read image
img <- readImage(imgname)
# Resize image 28x28
img_resized <- resize(img, w = w, h = h)
# Set to grayscale
grayimg <- channel(img_resized,"gray")
# Path to file
path <- paste(folder_grey, imgname, sep = "")
# Save image
writeImage(grayimg, path, quality = 100)
# Print status
print(paste("Done",i,sep = " "))},
# Error function
error = function(e){print(e)})
}
folder_grey = paste0(folder_main, "/data_grey/")
setwd(folder_main)
### scaling : gray, pixel(200 x 200)
library(jpeg)
library(EBImage)
images <- list.files(folder_data)
images
### setting width, height
w <- 80
h <- 80
setwd(folder_data)
for(i in 1:length(images))
{
# Try-catch is necessary since some images
# may not work.
i=1
result <- tryCatch({
# Image name
imgname <- images[i]
# Read image
img <- readImage(imgname)
# Resize image 28x28
img_resized <- resize(img, w = w, h = h)
# Set to grayscale
grayimg <- channel(img_resized,"gray")
# Path to file
path <- paste(folder_grey, imgname, sep = "")
# Save image
writeImage(grayimg, path, quality = 100)
# Print status
print(paste("Done",i,sep = " "))},
# Error function
error = function(e){print(e)})
}
images <- list.files(folder_data)
images
### setting width, height
w <- 200
h <- 200
setwd(folder_data)
for(i in 1:length(images))
{
# Try-catch is necessary since some images
# may not work.
result <- tryCatch({
# Image name
imgname <- images[i]
# Read image
img <- readImage(imgname)
# Resize image 28x28
img_resized <- resize(img, w = w, h = h)
# Set to grayscale
grayimg <- channel(img_resized,"gray")
# Path to file
path <- paste(folder_grey, imgname, sep = "")
# Save image
writeImage(grayimg, path, quality = 100)
# Print status
print(paste("Done",i,sep = " "))},
# Error function
error = function(e){print(e)})
}
### setting width, height
w <- 640
h <- 640
setwd(folder_data)
for(i in 1:length(images))
{
# Try-catch is necessary since some images
# may not work.
result <- tryCatch({
# Image name
imgname <- images[i]
# Read image
img <- readImage(imgname)
# Resize image 28x28
img_resized <- resize(img, w = w, h = h)
# Set to grayscale
grayimg <- channel(img_resized,"gray")
# Path to file
path <- paste(folder_grey, imgname, sep = "")
# Save image
writeImage(grayimg, path, quality = 100)
# Print status
print(paste("Done",i,sep = " "))},
# Error function
error = function(e){print(e)})
}
images
plot(images[1])
images[1]
readJPEG(paste0(folder_data, images[1]))
plot(readJPEG(paste0(folder_data, images[1])))
example((readJPEG(paste0(folder_data, images[1]))))
